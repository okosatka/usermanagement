/*
 * This file is generated by jOOQ.
 */

package com.example.usermanagement.jooq.tables;


import com.example.usermanagement.jooq.Keys;
import com.example.usermanagement.jooq.Public;
import com.example.usermanagement.jooq.tables.TbUserExternalProject.TbUserExternalProjectPath;
import com.example.usermanagement.jooq.tables.records.TbUserRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Collection;


/**
 * All users
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TbUser extends TableImpl<TbUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tb_user</code>
     */
    public static final TbUser TB_USER = new TbUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TbUserRecord> getRecordType() {
        return TbUserRecord.class;
    }

    /**
     * The column <code>public.tb_user.username</code>.
     */
    public final TableField<TbUserRecord, String> USERNAME =
            createField(DSL.name("username"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.tb_user.password</code>.
     */
    public final TableField<TbUserRecord, String> PASSWORD =
            createField(DSL.name("password"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.tb_user.email</code>.
     */
    public final TableField<TbUserRecord, String> EMAIL =
            createField(DSL.name("email"), SQLDataType.VARCHAR(320).nullable(false), this, "");

    /**
     * The column <code>public.tb_user.role</code>.
     */
    public final TableField<TbUserRecord, String> ROLE = createField(DSL.name("role"),
            SQLDataType.VARCHAR(255).nullable(false)
                    .defaultValue(DSL.field(DSL.raw("'USER'::character varying"), SQLDataType.VARCHAR)),
            this,
            "");

    private TbUser(Name alias, Table<TbUserRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TbUser(Name alias, Table<TbUserRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("All users"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.tb_user</code> table reference
     */
    public TbUser(String alias) {
        this(DSL.name(alias), TB_USER);
    }

    /**
     * Create an aliased <code>public.tb_user</code> table reference
     */
    public TbUser(Name alias) {
        this(alias, TB_USER);
    }

    /**
     * Create a <code>public.tb_user</code> table reference
     */
    public TbUser() {
        this(DSL.name("tb_user"), null);
    }

    public <O extends Record> TbUser(
            Table<O> path,
            ForeignKey<O, TbUserRecord> childPath,
            InverseForeignKey<O, TbUserRecord> parentPath) {
        super(path, childPath, parentPath, TB_USER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TbUserPath extends TbUser implements Path<TbUserRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> TbUserPath(
                Table<O> path,
                ForeignKey<O, TbUserRecord> childPath,
                InverseForeignKey<O, TbUserRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private TbUserPath(Name alias, Table<TbUserRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TbUserPath as(String alias) {
            return new TbUserPath(DSL.name(alias), this);
        }

        @Override
        public TbUserPath as(Name alias) {
            return new TbUserPath(alias, this);
        }

        @Override
        public TbUserPath as(Table<?> alias) {
            return new TbUserPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TbUserRecord> getPrimaryKey() {
        return Keys.TB_USER_PKEY;
    }

    private transient TbUserExternalProjectPath _tbUserExternalProject;

    /**
     * Get the implicit to-many join path to the
     * <code>public.tb_user_external_project</code> table
     */
    public TbUserExternalProjectPath tbUserExternalProject() {
        if (_tbUserExternalProject == null) {
            _tbUserExternalProject = new TbUserExternalProjectPath(
                    this,
                    null,
                    Keys.TB_USER_EXTERNAL_PROJECT__TB_USER_EXTERNAL_PROJECT_USERNAME_FKEY.getInverseKey());
        }

        return _tbUserExternalProject;
    }

    @Override
    public TbUser as(String alias) {
        return new TbUser(DSL.name(alias), this);
    }

    @Override
    public TbUser as(Name alias) {
        return new TbUser(alias, this);
    }

    @Override
    public TbUser as(Table<?> alias) {
        return new TbUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TbUser rename(String name) {
        return new TbUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TbUser rename(Name name) {
        return new TbUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TbUser rename(Table<?> name) {
        return new TbUser(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TbUser where(Condition condition) {
        return new TbUser(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TbUser where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TbUser where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TbUser where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TbUser where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TbUser where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TbUser where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TbUser where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TbUser whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TbUser whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
