/*
 * This file is generated by jOOQ.
 */

package com.example.usermanagement.jooq.tables;


import com.example.usermanagement.jooq.Keys;
import com.example.usermanagement.jooq.Public;
import com.example.usermanagement.jooq.tables.TbUser.TbUserPath;
import com.example.usermanagement.jooq.tables.records.TbUserExternalProjectRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * External Project identifier for users
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TbUserExternalProject extends TableImpl<TbUserExternalProjectRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tb_user_external_project</code>
     */
    public static final TbUserExternalProject TB_USER_EXTERNAL_PROJECT = new TbUserExternalProject();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TbUserExternalProjectRecord> getRecordType() {
        return TbUserExternalProjectRecord.class;
    }

    /**
     * The column <code>public.tb_user_external_project.project_id</code>.
     */
    public final TableField<TbUserExternalProjectRecord, String> PROJECT_ID =
            createField(DSL.name("project_id"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>public.tb_user_external_project.username</code>.
     */
    public final TableField<TbUserExternalProjectRecord, String> USERNAME =
            createField(DSL.name("username"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.tb_user_external_project.username</code>.
     */
    public final TableField<TbUserExternalProjectRecord, String> NAME =
            createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private TbUserExternalProject(Name alias, Table<TbUserExternalProjectRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TbUserExternalProject(
            Name alias,
            Table<TbUserExternalProjectRecord> aliased,
            Field<?>[] parameters,
            Condition where) {
        super(
                alias,
                null,
                aliased,
                parameters,
                DSL.comment("External Project identifier for users"),
                TableOptions.table(),
                where);
    }

    /**
     * Create an aliased <code>public.tb_user_external_project</code> table
     * reference
     */
    public TbUserExternalProject(String alias) {
        this(DSL.name(alias), TB_USER_EXTERNAL_PROJECT);
    }

    /**
     * Create an aliased <code>public.tb_user_external_project</code> table
     * reference
     */
    public TbUserExternalProject(Name alias) {
        this(alias, TB_USER_EXTERNAL_PROJECT);
    }

    /**
     * Create a <code>public.tb_user_external_project</code> table reference
     */
    public TbUserExternalProject() {
        this(DSL.name("tb_user_external_project"), null);
    }

    public <O extends Record> TbUserExternalProject(
            Table<O> path,
            ForeignKey<O, TbUserExternalProjectRecord> childPath,
            InverseForeignKey<O, TbUserExternalProjectRecord> parentPath) {
        super(path, childPath, parentPath, TB_USER_EXTERNAL_PROJECT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TbUserExternalProjectPath extends TbUserExternalProject
            implements Path<TbUserExternalProjectRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> TbUserExternalProjectPath(
                Table<O> path,
                ForeignKey<O, TbUserExternalProjectRecord> childPath,
                InverseForeignKey<O, TbUserExternalProjectRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private TbUserExternalProjectPath(Name alias, Table<TbUserExternalProjectRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TbUserExternalProjectPath as(String alias) {
            return new TbUserExternalProjectPath(DSL.name(alias), this);
        }

        @Override
        public TbUserExternalProjectPath as(Name alias) {
            return new TbUserExternalProjectPath(alias, this);
        }

        @Override
        public TbUserExternalProjectPath as(Table<?> alias) {
            return new TbUserExternalProjectPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TbUserExternalProjectRecord> getPrimaryKey() {
        return Keys.TB_USER_EXTERNAL_PROJECT_PKEY;
    }

    @Override
    public List<ForeignKey<TbUserExternalProjectRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TB_USER_EXTERNAL_PROJECT__TB_USER_EXTERNAL_PROJECT_USERNAME_FKEY);
    }

    private transient TbUserPath _tbUser;

    /**
     * Get the implicit join path to the <code>public.tb_user</code> table.
     */
    public TbUserPath tbUser() {
        if (_tbUser == null) {
            _tbUser = new TbUserPath(this, Keys.TB_USER_EXTERNAL_PROJECT__TB_USER_EXTERNAL_PROJECT_USERNAME_FKEY, null);
        }

        return _tbUser;
    }

    @Override
    public TbUserExternalProject as(String alias) {
        return new TbUserExternalProject(DSL.name(alias), this);
    }

    @Override
    public TbUserExternalProject as(Name alias) {
        return new TbUserExternalProject(alias, this);
    }

    @Override
    public TbUserExternalProject as(Table<?> alias) {
        return new TbUserExternalProject(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TbUserExternalProject rename(String name) {
        return new TbUserExternalProject(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TbUserExternalProject rename(Name name) {
        return new TbUserExternalProject(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TbUserExternalProject rename(Table<?> name) {
        return new TbUserExternalProject(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TbUserExternalProject where(Condition condition) {
        return new TbUserExternalProject(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TbUserExternalProject where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TbUserExternalProject where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TbUserExternalProject where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TbUserExternalProject where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TbUserExternalProject where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TbUserExternalProject where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TbUserExternalProject where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TbUserExternalProject whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TbUserExternalProject whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
